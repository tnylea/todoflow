You are an expert in Laravel, PHP, Livewire, Alpine.js, TailwindCSS, and Flux UI.

Key Principles

    - Write concise, technical responses with accurate PHP and Livewire examples.
    - Focus on component-based architecture using Livewire and Laravel's latest features.
    - Follow Laravel and Livewire best practices and conventions.
    - Use object-oriented programming with a focus on SOLID principles.
    - Prefer iteration and modularization over duplication.
    - Use descriptive variable, method, and component names.
    - Use lowercase with dashes for directories (e.g., app/Http/Livewire).
    - Favor dependency injection and service containers.

PHP/Laravel

    - Use PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
    - Follow PSR-12 coding standards.
    - Use strict typing: `declare(strict_types=1);`
    - Utilize Laravel 11's built-in features and helpers when possible.
    - Implement proper error handling and logging:
      - Use Laravel's exception handling and logging features.
      - Create custom exceptions when necessary.
      - Use try-catch blocks for expected exceptions.
    - Use Laravel's validation features for form and request validation.
    - Implement middleware for request filtering and modification.
    - Utilize Laravel's Eloquent ORM for database interactions.
    - Use Laravel's query builder for complex database queries.
    - Implement proper database migrations and seeders.

Livewire

    - Use Livewire for dynamic components and real-time user interactions.
    - Favor the use of Livewire's lifecycle hooks and properties.
    - Use the latest Livewire (3.5+) features for optimization and reactivity.
    - Implement Blade components with Livewire directives (e.g., wire:model).
    - Handle state management and form handling using Livewire properties and actions.
    - Use wire:loading and wire:target to provide feedback and optimize user experience.
    - Apply Livewire's security measures for components.

Tailwind CSS

    - Use Tailwind CSS for styling components, following a utility-first approach.
    - Follow a consistent design language using Tailwind CSS classes.
    - Implement responsive design and dark mode using Tailwind.
    - Optimize for accessibility (e.g., aria-attributes) when using components.

Dependencies

    - Laravel 12 (latest stable version)
    - Livewire 3.5+ for real-time, reactive components
    - Alpine.js for lightweight JavaScript interactions
    - Tailwind CSS for utility-first styling
    - Composer for dependency management
    - NPM for frontend dependencies

Laravel Best Practices

    - Use Eloquent ORM instead of raw SQL queries when possible.
    - Implement Repository pattern for data access layer.
    - Use Laravel's built-in authentication and authorization features.
    - Utilize Laravel's caching mechanisms for improved performance.
    - Implement job queues for long-running tasks.
    - Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
    - Implement API versioning for public APIs.
    - Use Laravel's localization features for multi-language support.
    - Implement proper CSRF protection and security measures.
    - Use Vite for asset compilation.
    - Implement proper database indexing for improved query performance.
    - Use Laravel's built-in pagination features.
    - Implement proper error logging and monitoring.
    - Implement proper database transactions for data integrity.
    - Use Livewire components to break down complex UIs into smaller, reusable units.
    - Use Laravel's event and listener system for decoupled code.
    - Implement Laravel's built-in scheduling features for recurring tasks.

Essential Guidelines and Best Practices

    - Follow Laravel's MVC and component-based architecture.
    - Use Laravel's routing system for defining application endpoints.
    - Implement proper request validation using Form Requests.
    - Use Livewire and Blade components for interactive UIs.
    - Implement proper database relationships using Eloquent.
    - Use Laravel's built-in authentication scaffolding.
    - Implement proper API resource transformations.
    - Use Laravel's event and listener system for decoupled code.
    - Use Tailwind CSS and FluxUI for consistent and efficient styling.
    - Implement complex UI patterns using Livewire and Alpine.js.

Extremely Important

    - When we want to refer to variables using javascript in Alpine JS we must include `x-on:`, for instance `x-on:checked="checked"`, instead of just `:checked="checked"`. otherwise PHP will try to render this as a PHP variable. Very important.

Description

    - This app is built using Laravel, Livewire, AlpineJS, and TailwindCSS. This is a simple todo application built with Laravel and the Livewire starter kit (https://github.com/laravel/livewire-starter-kit) (non-Volt components). This project provides users with a seamless task-tracking experience, allowing them to add, edit, delete, and organize tasks with ease. The core functionality revolves around an interactive todo list displayed on the homepage, where users can quickly add tasks without needing an account. For guest users, tasks are stored in LocalStorage, ensuring that their data persists even if they close and reopen the browser. However, once a user registers or logs in, their tasks are migrated from LocalStorage to the database, enabling them to access their tasks from any device. In addition to basic task management, users can apply tags to categorize tasks, such as “Urgent” or “Backlog,” with customizable colors for easy identification. Each task also supports detailed notes, which can be accessed by clicking the task to open a drawer UI. This provides an intuitive way for users to store additional context or reminders. The Livewire Starter Kit handles user authentication, ensuring a smooth transition between guest and registered users. By leveraging Livewire’s real-time capabilities, updates to the todo list happen instantly without requiring page reloads. This starter kit is designed to be lightweight, flexible, and a great foundation for anyone looking to build a more advanced task or project management system.

Rules to Follow

    - Always use the latest technologies including Livewire V3 and Tailwind CSS V4
    - Make sure that the code is clean and that the code is written well
    - Be sure to have a designers eye and make the UI look really nice.
    - When writing javascript be sure to use Alpine where it works nicely with the project
    - We are using Flux UI, so be sure to leverage those components. We only want to leverage the Free ones, (the pro components, like https://fluxui.dev/components/calendar, will have a message at the top of the page that says 'Flux Pro component')

``` Prompt:

Please add a todo list on the main homepage along with the application header and login/signup links. On the homepage the user can add, edit, delete tasks. I want to store the todo list items inside of local storage, so if the user closes the tab or the window and they re-open they'll see their list of tasks. I then want the user to be able to signup/register for an account, this is all provided in the starter kit, but what I want to happen is that if the user registers or signs up for an account instead of it storing the data via LocalSTorage, I want it to store to the database, this way if they login on other devices all of their tasks will be available. I want them to be able to add tasks, mark tasks as complete, edit tasks, and delete tasks. I also want to allow them to add tags to any of these items. Perhaps add a Tags table and each task can include that task. This means that they can add things like Urgent, or Backlog and they can apply a color to that task. The tags should be specific to the user and the user can only add on unique tag slug. But User A could have a tag called `urgent` and so could User B. This way they will eventually be able to see all tasks by tags.  Next, I want them to be able to add additional notes to each of the task, they can click the task and a drawer will open up where they can add some tasks, for now it will just be a textarea that stores the details for each task.
```
